<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Overview</title>
        <author email="peter at realityforge.org">Peter Donald</author>
    </properties>
    <body>
        <section name="Introduction">
            <p>
                The Extension toolkit contains classes to represent entrys for
                "Optional Package" instances (formerly known as "Standard Extension")
                as described in the manifest of a JAR file. The toolkit can also
                parse and represent Specification sections described in manifests.
            </p>
        </section>
        <section name="Extensions">
            <p>
                The "Optional Package" mechanism can be used to declare is used
                to declare dependencies on libraries. Prior to JDK1.3, an "Optional
                Package" was known as an <em>Extension</em>. The specification for this
                mechanism is available in the JDK1.3 documentation in the directory
                <tt>$JDK_HOME/docs/guide/extensions/versioning.html</tt>. Alternatively
                it is available online at <a href="http://java.sun.com/j2se/1.3/docs/guide/extensions/versioning.html">
                http://java.sun.com/j2se/1.3/docs/guide/extensions/versioning.html</a>.
            </p>

            <p>
                Support for the "Optional Package" specification is being mandated
                by other specifications such as the <em>Servlet 2.3 API</em>. Thus we
                are likely to see an increase of jars using this mechanism to specify
                dependencies.
            </p>

            <p>
                The "Optional Package" mechanism allows jars to specify dependencies on other
                jars that implement a particular specification at particular version levels. For
                example you could specify a dependency on the Trax 1.1 API by adding the following
                to the manifest of your jar.
            </p>

            <source>
Extension-List: trax
trax-Extension-Name: Java API for XML Parsing
trax-Specification-Version: 1.1
            </source>

            <p>
                In some cases you may also wish to specify a dependency on a specific vendors
                implementation. For instance you may need to use xalan due to it implementing a
                particular extension you need. In that case you manifest may contain;
            </p>

            <source>
Extension-List: trax
trax-Extension-Name: Java API for XML Parsing
trax-Specification-Version: 1.1
trax-Implementation-Title: org.apache.xalan.xslt
trax-Implementation-Version: 2.1.0
trax-Implementation-Vendor: Apache Software Foundation
            </source>

            <p>
                In many cases there will be no distinction between the specification and
                the implementation of a library. For instance the Velocity project only has
                one implementation and one specification. In which case it is sufficient to
                just declare a dependency on the Velocity "Specification". A library that uses
                both the Trax API and the Velocity project may look like;
            </p>

            <source>
Extension-List: trax velocity
velocity-Extension-Name: org.apache.velocity
velocity-Specification-Version: 1.0
trax-Extension-Name: Java API for XML Parsing
trax-Specification-Version: 1.1
trax-Implementation-Title: org.apache.xalan.xslt
trax-Implementation-Version: 2.1.0
trax-Implementation-Vendor: Apache Software Foundation
            </source>

            <p>To make other jars available as possible to libraries to add libraries
                as "Optional Packages" or Extensions then you need to add a few lines
                to the manifest of the other jar. The minimal manifest is the following;</p>

            <source>
Extension-Name: org.realityforge.dve
Specification-Vendor: Peter Donald
Specification-Version: 1.0
            </source>

            <p>
                It is important to note that resolving dependencies is recursive. For example,
                if the library depends upon jar A and and A depends on B then both A
                and B will need to be loaded by the container.
            </p>

        </section>

        <section name="Using Extension">
            <p>
                The Extension class is responsible for both parsing and representing
                information about Extensions. Example usage;
            </p>
            <pre>
//Get manifest file for library
final Manifest manifest = ...;

// Get a list of extensions that this
// library can provide to other librarys
Extension[] available = Extension.getAvailable( manifest );

// Get a list of extensions that this
// library requires to work
Extension[] required = Extension.getRequired( manifest );
            </pre>
        </section>
    </body>
</document>
