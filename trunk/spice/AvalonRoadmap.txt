    $Id: AvalonRoadmap.txt,v 1.5 2002-11-26 06:52:07 donaldp Exp $

                     Roadmap for development of 
                        Avalon Framework

In this document I attempt to outline a future direction for Avalon.
There is little doubt that there are issues that need to be addressed
within Avalon. 

Many solutions have been proposed and many discussions have been initiated. 
At this stage it has mainly been pie in the sky talks that while idealistic 
lack practical aspects that make them viable paths of evolution.

One thing I really want to avoid is repeating the same mistakes that we have 
committed in the past. In particular all this talk about a single container
makes me somewhat nervous. It has been tried before in the past and IMHO the
issues have not become sufficiently clear that we are certain to avoid the 
problems of the past. Essentially it comes down to how do we provide the 
flexability that is required by all interested parties without making the 
container overly complex, buggy and painful to maintain. For a better 
explanation of the issues you may want to read an interview with Martin 
Fowler [1]  who recently discussed some similar issues.

I happen to think that we are far closer now than in any point in our past
to creating a generic container but I don't want to abandon our current users 
while we spend a year or more finding out if the ideas will work out. I will
try to spend some time drawing together the ideas I have been talking about
for the last few months and documenting them. However I don't think we should
bet the farm on these ideas.

So what I think we should focus on is the problems that have practical 
solutions and are immediately useful. If we can make many little steps then
that would be a far better situation than one big revolution. It may also 
restore the trust in each other that is currently lacking around here.

The most important issue IMO is to enable portability of components between
containers where possible or at least give the ability to identify 
non-portable components. This means that we need to be able to associate 
metadata with particular components that define;
 * what the component requires
 * what the component is capable of providing

This essentially means defining a more complete component model. The component
model must be based on stable foundations however it must also be extensible to 
deal with future evolutions of the components. We must also put in place a 
mechanism for defining such extensions.

This component model should not be considered to be a required part of all 
containers but if a container does implement richer type semantics they should be 
able to implement it using this model. This means that containers such as 
ECM/Fortress can still exist sans support and users such as Cocoon can continue to
work without breaking backwards compatability.

The next thing that we need to do is to define a packaging format for our resources.
This means defining a way to list the set of components/classes/resources exported
from a library. We also need to define relationships between libraries. ie Library A
may require Library B and may enhance Library C. We must also be able to associate 
metadata with librarys. This metadata must also be extensible so that it can contain 
arbitary metadata to support future needs such as;
 * library display name
 * documentation pointers
 * license details
 etc

Given the above it would now be possible to share the components between the containers 
that supported rich metadata for components. It would also enable sharing of librarys of 
such components. 

Note that there has been no mention of changing current practices wrt the interaction
between the container and the component. The above steps serve only to represent the 
existing component usage patterns and make no effort to change or modify semantics such 
as;
* Usage of Selectors
* Usage of typed Contexts
* Usage of array/map dependencies

Nor has there been any mention of assembly metadata (ie metadata relating to instantiation 
of a component). While it may be possible to define this in the future, it is a significantly
more complex problem which has not matured enough to be ready for us to standardize on.

So given the above I think that the first three things we need to do and the time frame in 
which we can do them;

1. Define a generic mechanism for attaching MetaData to entitys. 
   Expected Resolution Date: Mid-December
2. Define the component model. 
   Expected Resolution Date: Late-January
3. Define the library format. 
   Expected Resolution Date: Mid to Late-Febuary

After we have done the above we can then look at taking further steps to converge
the current work occuring in Avalon.

[1] Martin Fowler, Complexity/Flexability Interview - http://www.artima.com/intv/flexplex.html