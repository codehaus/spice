<?xml version="1.0"?>
<document>

  <properties>
    <title>Selectors</title>
    <author email="peter at www.stocksoftware.com.au">Peter Donald</author>
  </properties>

  <body>

  <section name="Introduction">
    <p>
      For each intercepted invocation a series of 0 or more Interceptors may
      be given a chance to handle the invocation directly or perform operations
      before or after the invocation. The XInvoke framework has a pluggable facility
      for creating the series of Interceptors which are assigned to each intercepted
      object (aka Proxy). See the
      <a href="apidocs/org/realityforge/xinvoke/spi/InterceptorManager.html">
      InterceptorManager</a> javadocs for the definition of this facility.
    </p>
    <p>
      However it is common for an implementation to allow a mechanism via which
      different Interceptors can be applied to different classes, methods,
      instances or even different invocations. While each different implementation
      may allocate Interceptors via different mechanisms this document attempts
      to document a standard set of selector expressions that can be used to designate
      which interceptors get invoked by different invocations.
    </p>
    <p>
      Usually each Interceptor or Interceptor series will be associated with a
      selector and if the selector expression returns true the invocations will
      pass through the Interceptor or Interceptor series.
    </p>
  </section>

  <section name="Selector Expression List">
    <p>
      The following is a list of expressions that can be statically evaluated based
      on the interfaces that are interccepted and the class of the target. This is
      cecause most InterceptorManagers allocate Interceptors based on static analysis
      for performance reasons.
    </p>
    <p>
      Note that some of the expressions refer to "Attributes". Attributes are a mechanism
      for attaching metadata to program elements (such as classes, methods and fields).
      More details can be found on the <a href="http://spice.sourceforge.net/metaclass">
      MetaClass</a> website.
    </p>
    <table>
      <tr><th>Expression</th><th>Returns true if...</th></tr>
      <tr>
        <td>Interface.isClass("MyClass")</td>
        <td>the method is declared in a Interface with specified Class.</td>
      </tr>
      <tr>
        <td>Interface.isClassMatching("My.*Class")</td>
        <td>the method is declared in a Interface with Class that has a name matching regex pattern.</td>
      </tr>
      <tr>
        <td>Interface.isSubClassOf("MySuperClass")</td>
        <td>the method is declared in a Interface with a Class that has specified Class as superclass.</td>
      </tr>
      <tr>
        <td>Interface.withClassAttribute("phoenix.component")</td>
        <td>the method is declared in a Interface that has specified Class Attribute.</td>
      </tr>
      <tr>
        <td>Interface.inPackage("com.biz")</td>
        <td>the method is declared in a Interface contained within specified Package.</td>
      </tr>
      <tr>
        <td>Interface.inPackageMatching("com\.biz\..*")</td>
        <td>the method is declared in a Interface contained within Package that has a name
            matching regex pattern.</td>
      </tr>
      <tr>
        <td>Target.isClass("MyClass")</td>
        <td>the method is declared in a target object with specified Class.</td>
      </tr>
      <tr>
        <td>Target.isClassMatching("My.*Class")</td>
        <td>the method is declared in a target object with Class that has a name matching regex pattern.</td>
      </tr>
      <tr>
        <td>Target.isSubClassOf("MySuperClass")</td>
        <td>the method is declared in a target object with a Class that has specified Class as superclass.</td>
      </tr>
      <tr>
        <td>Target.withClassAttribute("phoenix.component")</td>
        <td>the method is declared in a target object that has specified Class Attribute.</td>
      </tr>
      <tr>
        <td>Target.inPackage("com.biz")</td>
        <td>the method is declared in a target object contained within specified Package.</td>
      </tr>
      <tr>
        <td>Target.inPackageMatching("com\.biz\..*")</td>
        <td>the method is declared in a target object contained within Package that has a name
            matching regex pattern.</td>
      </tr>
      <tr>
        <td>Target.noImplement()</td>
        <td>the method is not implemented by the target object.</td>
      </tr>
      <tr>
        <td>Target.isNull()</td>
        <td>the target object is null.</td>
      </tr>
      <tr>
        <td>Method.withName("doMagic")</td>
        <td>the method has specified name.</td>
      </tr>
      <tr>
        <td>Method.withNameMatching("do.*Magic")</td>
        <td>the method has name matching regex pattern.</td>
      </tr>
      <tr>
        <td>Method.isSynchronized()</td>
        <td>the method is a synchronized method.</td>
      </tr>
      <tr>
        <td>Method.withAttribute("persist")</td>
        <td>the method has the specified Method Attribute.</td>
      </tr>
    </table>
  </section>

  </body>

</document>
