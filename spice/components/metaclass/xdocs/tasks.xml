<?xml version="1.0"?>
<document>

  <properties>
    <title>Tasks</title>
   	<author email="peter at realityforge.org">Peter Donald</author>
  </properties>

  <body>
    <section name="Tasks">
      <p>
      </p>

		<subsection name="TODO">
		  <p>
			<ul>
			  <li>Refactor tests so that all tests only have attributes that have either
	  value or parameters - not both
			  </li>
			  <li>Add in unit test to make sure that it is impossible to have text and parameters
			  </li>
			  <li>Need to parse the value from QDox Tags. If the tags have the format (@name a="b" c="s")
	  then they are treated as parameter tags otherwise they are treated as raw text.
			  </li>
			  <li>Uncomment section in Attribute constructor to make sure that it is not
	  possible to have both text and parameters and if both are set a exception
	  should be thrown
			  </li>
			  <li>Fix hack in MetaGenerateTask that had classnames starting with null? Why?
	ie lines;
	        //HACK: Seems like a hack - why is it here ???? Can we delete it now?
	        if( classname.startsWith( "null." ) )
			  </li>
			  <li>Add in Javadoc for all classes, and all methods
			  </li>
			  <li>Move the MetaGenerateTask.extractClassDescriptor and related methods into a new class
			  </li>
			  <li>Consider using a new extension that is a little more logical. Maybe -meta.binary, -meta.xml, -meta.ser ?
			  </li>
			  <li>Rename Utilities to MetaClassTestUtils and move it into the test hierarchy. Also remove the
	  equals() implementations from all the model elements as they are only used in unit tests but
	  in the real world we only want equals() to be true when they are the same object. The reason
	  for this is that it is unlikely that multiple descriptors for the same class would ever be loaded
	  and compared against each other. So there is no real advantag and doing a deep comparison takes
	  time (ie we could perform this check 100 times each time we access descriptors from the cache or
	  something).
			  </li>
			  <li> Add in a convenience class to extract attributes in a much more easier format. The file should
	  be in org.realityforge.metaclass and should allow use cases such as;
	  			<source>
	//get attributes for a class
	final Attribute[] attributes = Attributes.getAttributes(SomeClass.class);
	final Attribute attribute = Attributes.getAttribute(SomeClass.class,"iris.busobj");
	
	//get attributes for a field
	final Field field = SomeClass.class.getDeclaredField("myField");
	final Attribute[] attributes = Attributes.getAttributes(field);
	final Attribute attribute = Attributes.getAttribute(field,"iris.persist");
	
	//get attributes for method with no parameters
	final Method method = SomeClass.class.getMethod("doStuff", null);
	final Attribute[] attributes = Attributes.getAttributes(method);
	final Attribute attribute = Attributes.getAttribute(method,"iris.job");
	
	//get attributes for method with a single parameter
	final Method method = SomeClass.class.getMethod("doStuff", new Class[]{String.class});
	final Attribute[] attributes = Attributes.getAttributes(method);
	final Attribute attribute = Attributes.getAttribute(method,"iris.job");
	  			</source>
			  </li>
			  <li>Consider storing attributes for packages in a file such as com/biz/package.mad for the com.biz
	  package. ("package" is a reserved word so no class can be named this and thus the above should
	  not cause conflicts). It would be accessed via something like
				<source>
	final Package pkg = Package.getPackage("com.biz");
	final Attribute[] attributes = Attributes.getAttributes(pkg);
	final Attribute attribute = Attributes.getAttribute(pkg,"busobj.desc");
				</source>
			  </li>
			</ul>
		  </p>
	  	</subsection>
    </section>

  </body>
</document>
